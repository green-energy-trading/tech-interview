version: 0.2
env:
  variables:
    SERVICE_NAME: 
    ENV: production
phases:
  install:
    commands:
      - >-
        nohup /usr/local/bin/dockerd
        --host=unix:///var/run/docker.sock
        --host=tcp://127.0.0.1:2375
        --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_NAME=$SERVICE_NAME
      - IMAGE_TAG_FILTER=demo
      - IMAGE_DIGEST=$(aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag=$IMAGE_TAG_FILTER --query 'images[].imageId.imageDigest' --output text)
      - MANIFEST=$(aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag=$IMAGE_TAG_FILTER --query 'images[].imageManifest' --output text)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=$ENV}
  build:
    commands:
      # Check whether the production image already exists by scanning with the image digest of the most recent demo image.
      # IMAGE_LENGTH is 0 if the production image is already pushed, otherwise 1.
      - IMAGE_LENGTH=$(aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageDigest=$IMAGE_DIGEST,imageTag=$ENV --query 'length(images[])' --output text)
      - if [ $IMAGE_LENGTH -eq 0 ]; then aws ecr put-image --repository-name $REPOSITORY_NAME --image-tag $ENV --image-manifest "$MANIFEST"; fi
  post_build:
    commands:
      - helm lint helm/$SERVICE_NAME
      - >-
        helm upgrade
        $SERVICE_NAME
        ./helm/$SERVICE_NAME
        --install
        --namespace $ENV
        --set-string image.tag=$IMAGE_TAG
        --set-string NODE_ENV=$ENV
